[{"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\reportWebVitals.js":"1","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\App.js":"2","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\ChoiceData\\ChoiceData.js":"3","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\DataFilter\\DataFilter.js":"4","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\DataTable.js":"5","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\Pagination\\Pagination.js":"6","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\index.js":"7","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\NewItemButton\\NewItemButton.js":"8"},{"size":362,"mtime":1607092309552,"results":"9","hashOfConfig":"10"},{"size":679,"mtime":1608823898299,"results":"11","hashOfConfig":"10"},{"size":1392,"mtime":1608794948396,"results":"12","hashOfConfig":"10"},{"size":2574,"mtime":1608901039206,"results":"13","hashOfConfig":"10"},{"size":7211,"mtime":1608991698762,"results":"14","hashOfConfig":"10"},{"size":2853,"mtime":1608870457315,"results":"15","hashOfConfig":"10"},{"size":500,"mtime":1608881607036,"results":"16","hashOfConfig":"10"},{"size":6235,"mtime":1608988459561,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w8p0wx",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\reportWebVitals.js",[],"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\App.js",[],"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\ChoiceData\\ChoiceData.js",[],"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\DataFilter\\DataFilter.js",[],"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\DataTable.js",["35","36","37","38","39"],"import React, { useState, useEffect } from \"react\";\r\nimport DataFilter from \"./DataFilter/DataFilter\";\r\nimport NewItemButton from \"./NewItemButton/NewItemButton\";\r\nimport Pagination from \"./Pagination/Pagination\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Table, Container, Button, Modal, Spinner } from \"react-bootstrap\";\r\n\r\nconst server_api = \"http://127.0.0.1:2010\";\r\n\r\nfunction DataTable(props) {\r\n\r\n    const [state, setState] = useState({\r\n        data: [{}],\r\n        elem: [{}],\r\n    });\r\n\r\n    const [modal, setModal] = useState({\r\n        show: false,\r\n        person: {},\r\n    })\r\n\r\n    let history = useHistory();\r\n\r\n    let refId = React.createRef();\r\n    let refFirstName = React.createRef();\r\n    let refLastName = React.createRef();\r\n    let refEmail = React.createRef();\r\n    let refPhone = React.createRef();\r\n\r\n    useEffect(() => {\r\n        let url = `${server_api}${window.location.pathname}${window.location.search}`;\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setState((state) => ({\r\n                    ...state,\r\n                    data: data,\r\n                    elem: data.elem,\r\n                }))\r\n            });\r\n\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let url = `${server_api}${window.location.pathname}${window.location.search}`;\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setState((state) => ({\r\n                    ...state,\r\n                    data: data,\r\n                    elem: data.elem,\r\n                }))\r\n            });\r\n        window.scrollTo(0, 0);\r\n    }, [props.url])\r\n\r\n    const sortRow = (col_name, ref) => {\r\n        let _data = state.elem;\r\n        _data.sort((a, b) => {\r\n            if (a[col_name] > b[col_name]) {\r\n                return 1;\r\n            }\r\n            if (a[col_name] < b[col_name]) {\r\n                return -1;\r\n            }\r\n            // a == b\r\n            return 0;\r\n        });\r\n        setState((state) => ({\r\n            ...state,\r\n            elem: _data,\r\n        }))\r\n    }\r\n\r\n    function additionalInfo(person) {\r\n        setModal((modal) => ({\r\n            ...modal,\r\n            show: true,\r\n            person: person,\r\n        }))\r\n    }\r\n\r\n    function closeModal() {\r\n        setModal((modal) => ({\r\n            ...modal,\r\n            show: false,\r\n        }))\r\n    }\r\n\r\n    return (\r\n\r\n        <Container>\r\n\r\n            <Button\r\n                className=\"mt-5 mb-5\"\r\n                variant=\"outline-secondary\"\r\n                onClick={() => {\r\n                    history.push(\"/\");\r\n                }}>\r\n                К выбору данных\r\n            </Button>\r\n\r\n            <DataFilter state={state} setState={setState} server_api={server_api} />\r\n\r\n            <Table bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th role=\"button\" onClick={() => sortRow(\"id\")}>id ▼</th>\r\n                        <th role=\"button\" onClick={() => sortRow(\"firstName\")}>First Name ▼</th>\r\n                        <th role=\"button\" onClick={() => sortRow(\"lastName\")}>Last Name ▼</th>\r\n                        <th role=\"button\" onClick={() => sortRow(\"email\")}>Email ▼</th>\r\n                        <th role=\"button\" onClick={() => sortRow(\"phone\")}>Phone ▼</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.elem.length !== 0 ?\r\n                        <TableRowItem elem={state.elem} onClick={additionalInfo} />\r\n                        :\r\n                        <tr key={1}>\r\n                            <td className=\"text-info\" colSpan=\"5\">\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    Данные загружаются или не найдены\r\n                                        <Spinner className=\"ml-2\" animation=\"border\" variant=\"info\" role=\"status\">\r\n                                        <span className=\"sr-only\">Loading...</span>\r\n                                    </Spinner>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n                {modal.show &&\r\n                    <Modal\r\n                        show={modal.show}\r\n                        onHide={closeModal}\r\n                        backdrop=\"static\"\r\n                        keyboard={false}\r\n                    >\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Дополнительная информация</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <p><span className=\"font-weight-bold\">id: </span>{modal.person.id}</p>\r\n                            <p><span className=\"font-weight-bold\">firstName: </span>{modal.person.firstName}</p>\r\n                            <p><span className=\"font-weight-bold\">lastName: </span>{modal.person.lastName}</p>\r\n                            <p><span className=\"font-weight-bold\">email: </span>{modal.person.email}</p>\r\n                            <p><span className=\"font-weight-bold\">phone: </span>{modal.person.phone}</p>\r\n                            <p><span className=\"font-weight-bold\">address: </span>{modal.person.address.streetAddress}</p>\r\n                            <p><span className=\"font-weight-bold\">city: </span>{modal.person.address.city}</p>\r\n                            <p><span className=\"font-weight-bold\">state: </span>{modal.person.address.state}</p>\r\n                            <p><span className=\"font-weight-bold\">zip: </span>{modal.person.address.zip}</p>\r\n                            <p><span className=\"font-weight-bold\">description: </span>{modal.person.description}</p>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"success\" onClick={closeModal}>\r\n                                Ок\r\n                        </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                }\r\n            </Table>\r\n\r\n            <NewItemButton server_api={server_api} setState={setState} state={state}/>\r\n\r\n            {(state.data.next_page !== undefined | state.data.prev_page !== undefined) && <Pagination state={state} setUrl={props.setUrl} url={props.url} server_api={server_api} />}\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst TableRowItem = (props) => {\r\n    return (\r\n        <>\r\n            {props.elem.map((person, i) => {\r\n                return (\r\n                    <tr role=\"button\" key={i} id={person.id} onClick={() => props.onClick(person)}>\r\n                        <td>{person.id}</td>\r\n                        <td>{person.firstName}</td>\r\n                        <td>{person.lastName}</td>\r\n                        <td>{person.email}</td>\r\n                        <td>{person.phone}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DataTable;","C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\Pagination\\Pagination.js",[],"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\index.js",[],"C:\\Users\\fantasys\\Documents\\projects\\test_future\\client\\src\\components\\DataTable\\NewItemButton\\NewItemButton.js",[],{"ruleId":"40","severity":1,"message":"41","line":25,"column":9,"nodeType":"42","messageId":"43","endLine":25,"endColumn":14},{"ruleId":"40","severity":1,"message":"44","line":26,"column":9,"nodeType":"42","messageId":"43","endLine":26,"endColumn":21},{"ruleId":"40","severity":1,"message":"45","line":27,"column":9,"nodeType":"42","messageId":"43","endLine":27,"endColumn":20},{"ruleId":"40","severity":1,"message":"46","line":28,"column":9,"nodeType":"42","messageId":"43","endLine":28,"endColumn":17},{"ruleId":"40","severity":1,"message":"47","line":29,"column":9,"nodeType":"42","messageId":"43","endLine":29,"endColumn":17},"no-unused-vars","'refId' is assigned a value but never used.","Identifier","unusedVar","'refFirstName' is assigned a value but never used.","'refLastName' is assigned a value but never used.","'refEmail' is assigned a value but never used.","'refPhone' is assigned a value but never used."]